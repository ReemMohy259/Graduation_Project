package com.diagnostic.demo;

import com.diagnostic.core.InterpretedResponse;
import com.diagnostic.core.RequestHandler;
import com.diagnostic.core.Response;
import com.diagnostic.services.ECUReset.ECUReset;
import com.diagnostic.services.ECUReset.ECUReset_ResetType;
import com.diagnostic.services.ECUReset.ECUReset_ResponseData;
import com.diagnostic.services.Security_Access.SecurityAccess;
import com.diagnostic.services.Security_Access.SecurityAccessInterpretedResponse;
import com.diagnostic.services.Security_Access.SecurityAccess_Mode;

public class DiagnosticSystemDemo {
	
	public static void main(String[] args) {
		System.out.println("Starting Diagnostic System Demo...\n");

		// Test both ECU Reset and Security Access
		testECUReset();
		testSecurityAccess();
	}

	private static void testECUReset() {
		System.out.println("=== Testing ECU Reset Service ===");

		ECUReset ecuReset = new ECUReset();

		// Test different reset types
		testResetType(ecuReset, ECUReset_ResetType.HARD_RESET, "Hard Reset");
		testResetType(ecuReset, ECUReset_ResetType.SOFT_RESET, "Soft Reset");
		testResetType(ecuReset, ECUReset_ResetType.KEY_OFF_ON_RESET, "Key Off/On Reset");
	}

	private static void testResetType(ECUReset ecuReset, int resetType, String resetName) {
		try {
			System.out.println("\nTesting " + resetName);

			// Create reset request
			RequestHandler request = ecuReset.makeRequest(resetType);
			System.out.println("Created reset request with type: " + resetType);

			// You should now send request to the transport layer


			// Simulate ECU response (in real system, this would come from the ECU)
			// Response format: first byte is reset type echo, second byte is powerdown time
			byte[] responseData = new byte[]{(byte)resetType, 0x30}; // 0x30 = 48 seconds
			Response response = new Response(ecuReset, 0x51, responseData);
			System.out.println("Received response from ECU");

			// Interpret response
			InterpretedResponse interpretedResponse = ecuReset.interpretResponse(response);
			ECUReset_ResponseData resetData = (ECUReset_ResponseData)interpretedResponse.getServiceData();

			System.out.println("Reset Type Echo: 0x" + String.format("%02X", resetData.getResetTypeEcho()));
			System.out.println("Powerdown Time: " + resetData.getPowerdownTime() + " seconds");

		} catch (Exception e) {
			System.err.println("Error during " + resetName + ": " + e.getMessage());
		}
	}

	private static void testSecurityAccess() {
		System.out.println("\n=== Testing Security Access Service ===");

		SecurityAccess securityAccess = new SecurityAccess();

		try {
			// Step 1: Request Seed
			System.out.println("\nStep 1: Requesting Seed");
			RequestHandler seedRequest = securityAccess.makeRequest(
					1,  // security level
					SecurityAccess_Mode.REQUEST_SEED,
					new byte[0]
					);

			// You should now send seedRequest to the transport layer

			// Simulate server response with seed 0x3657
			byte[] seedResponseData = new byte[]{0x36, 0x57};
			Response seedResponse = new Response(securityAccess, 0x67, seedResponseData);
			System.out.println("Received seed from server: 0x3657");

			// Interpret seed response
			SecurityAccessInterpretedResponse interpreted = 
					(SecurityAccessInterpretedResponse) securityAccess.interpretResponse(
							seedResponse,
							SecurityAccess_Mode.REQUEST_SEED
							);

			// Step 2: Calculate Key
			System.out.println("\nStep 2: Calculating Key");
			byte[] key = interpreted.calculateKey();
			System.out.println("Calculated key: 0x" + 
					String.format("%02X%02X", key[0], key[1])); // Should print 0xC9A9

			// Step 3: Send Key
			System.out.println("\nStep 3: Sending Key");
			RequestHandler keyRequest = securityAccess.makeRequest(
					1,
					SecurityAccess_Mode.SEND_KEY,
					key
					);
			
			//You should now send keyRequest to the transport layer

			// Simulate server response to key
			Response keyResponse = new Response(securityAccess, 0x67, new byte[]{0x02});
			
			SecurityAccessInterpretedResponse keyResult = 
					(SecurityAccessInterpretedResponse) securityAccess.interpretResponse(
							keyResponse,
							SecurityAccess_Mode.SEND_KEY
							);

			System.out.println("Key accepted by server");

			// Verify key calculation
			verifyKeyCalculation(interpreted.getSeedValue(), key);

		} catch (Exception e) {
			System.err.println("Error during security access: " + e.getMessage());
		}
	}

	private static void verifyKeyCalculation(int seed, byte[] calculatedKey) {
		System.out.println("\n=== Verifying Key Calculation ===");
		System.out.println("Original Seed: 0x" + String.format("%04X", seed));

		// Calculate expected key (2's complement)
		int expectedKey = (~seed + 1) & 0xFFFF;
		byte[] expectedKeyBytes = new byte[]{
				(byte)((expectedKey >> 8) & 0xFF),
				(byte)(expectedKey & 0xFF)
		};

		System.out.println("Expected Key: 0x" + 
				String.format("%02X%02X", expectedKeyBytes[0], expectedKeyBytes[1]));
		System.out.println("Calculated Key: 0x" + 
				String.format("%02X%02X", calculatedKey[0], calculatedKey[1]));

		boolean matches = calculatedKey[0] == expectedKeyBytes[0] && 
				calculatedKey[1] == expectedKeyBytes[1];

		System.out.println("Key Verification: " + 
				(matches ? "PASSED ✓" : "FAILED ✗"));
	}
}
