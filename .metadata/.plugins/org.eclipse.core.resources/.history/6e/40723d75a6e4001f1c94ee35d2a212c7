package com.diagnostic.services.Security_Access;

import com.diagnostic.core.BaseService;
import com.diagnostic.core.InterpretedResponse;
import com.diagnostic.core.RequestHandler;
import com.diagnostic.core.Response;

public class SecurityAccess extends BaseService {

	// Constants for subfunctions
	private static final int REQUEST_SEED_SUBFUNCTION = 0x01;
	private static final int SEND_KEY_SUBFUNCTION = 0x02;
	private static final int SEED_LENGTH = 2; 				// 2 bytes
	private static final int KEY_LENGTH = 2;  				// 2 bytes

	@Override
	public RequestHandler makeRequest(Object... args) {
		if (args.length < 3 || !(args[0] instanceof Integer) || 
				!(args[1] instanceof Integer) || !(args[2] instanceof byte[])) {
			throw new IllegalArgumentException("Level, mode, and data must be provided");
		}

		int level = (Integer) args[0];
		int mode = (Integer) args[1];
		byte[] data = (byte[]) args[2];

		// Determine subfunction based on mode
		int subfunction = (mode == SecurityAccess_Mode.REQUEST_SEED) ? 
				REQUEST_SEED_SUBFUNCTION : SEND_KEY_SUBFUNCTION;

		// Set suppressPosRspMsgIndicationBit to FALSE (0)
		boolean suppressPositiveResponse = false;

		return new RequestHandler(this, subfunction, suppressPositiveResponse, data);
	}

	@Override
	public InterpretedResponse interpretResponse(Response response) {
		return interpretResponse(response, SecurityAccess_Mode.REQUEST_SEED);
	}

	public InterpretedResponse interpretResponse(Response response, int mode) {
		if (!response.isValid()) {
			return new InterpretedResponse(); // Return error response
		}

		byte[] responseData = response.getData();

		if (mode == SecurityAccess_Mode.REQUEST_SEED) {
			if (responseData.length != SEED_LENGTH) {
				throw new IllegalStateException("Invalid seed length");
			}

			// Extract seed from response
			int seed = ((responseData[0] & 0xFF) << 8) | (responseData[1] & 0xFF);
			byte[] seedBytes = new byte[]{responseData[0], responseData[1]};

			return new SecurityAccessInterpretedResponse(
					new SecurityAccess_ResponseData(response.getCode(), seedBytes),
					seed
					);
		} else if (mode == SecurityAccess_Mode.SEND_KEY) {
			
			// Handle send key response
			return new SecurityAccessInterpretedResponse(
					new SecurityAccess_ResponseData(response.getCode(), new byte[0]),
					0
					);
		}

		throw new IllegalArgumentException("Invalid security access mode");
	}

	/**
	 * Calculates the key from the received seed
	 * The key is calculated as 2's complement of the seed value
	 * @param seed The 2-byte seed received from the server
	 * @return The 2-byte calculated key
	 */
	public static byte[] calculateKey(int seed) {
		// Calculate 2's complement of the seed (16-bit)
		int key = (~seed + 1) & 0xFFFF;

		// Convert to byte array
		return new byte[]{
				(byte)((key >> 8) & 0xFF),  // High byte
				(byte)(key & 0xFF)          // Low byte
		};
	}
}