package com.diagnostic.core;

import java.util.Arrays;

public class Response {

	/******************************* Data Members ****************************/
	private A_MType messageType;  	// Enum: Message Type
	private short A_SA;           	// Source Address (2 Bytes)
	private short A_TA;           	// Target Address (2 Bytes)
	private A_TA_Type targetAddressType; // Target Address Type Enum
	private short[] A_AE = null; 		 // Optional Address Extension
	private byte responseSID;                    // Service ID (1 Byte)
	private byte echoSF;                     // Subfunction (1 Byte)
	private byte[] A_Data = null;        // Additional Data (Optional)
	private int A_Length;                // Data Length (4 Bytes)

	private ResponseStatus responseStatus;
	private byte NRC;
	
	/******************************* Constructor ****************************/
	public Response(A_MType messageType, short A_SA, short A_TA, A_TA_Type targetAddressType,
			short[] A_AE, byte responseSID, byte echoSF, byte[] A_Data, int A_Length) {
		this.messageType = messageType;
		this.A_SA = A_SA;
		this.A_TA = A_TA;
		this.targetAddressType = targetAddressType;
		this.A_AE = (A_AE != null) ? A_AE.clone() : null;
		this.responseSID = responseSID;
		this.echoSF = echoSF;
		this.A_Data = (A_Data != null) ? A_Data.clone() : null;
		this.A_Length = A_Length;
	}

	/******************************* Getters ****************************/
	public A_MType getMessageType() { return messageType; }
	public short getSourceAddress() { return A_SA; }
	public short getTargetAddress() { return A_TA; }
	public A_TA_Type getTargetAddressType() { return targetAddressType; }
	public short[] getAddressExtension() { return (A_AE != null) ? A_AE.clone() : null; }
	public byte getServiceId() { return responseSID; }
	public byte getSubFunction() { return echoSF; }
	public byte[] getData() { return (A_Data != null) ? A_Data.clone() : null; }
	public int getDataLength() { return A_Length; }

	/******************************* Parsing Method ****************************/
	/*
	 * Parses a raw UDS response payload (byte array) and creates a Response object.
	 * @param payload Raw response bytes.
	 * @return Parsed Response object.
	 */
	public void fromPayload(byte[] payload) {
		if (payload == null || payload.length < 7) { // Minimum required length
			throw new IllegalArgumentException("Invalid payload: Too short to be a valid response.");
		}

		// Extract A_Length (4 Bytes)
		int index = payload.length - 4;
		A_Length = ((payload[index++] & 0xFF) << 24) |
				((payload[index++] & 0xFF) << 16) |
				((payload[index++] & 0xFF) << 8)  |
				(payload[index] & 0xFF);

		// Extract messageType (Assumes A_MType enum has a fromValue() method)
		index = 0;
		messageType = A_MType.fromValue(payload[index++]);

		// Extract A_SA (Source Address - 2 Bytes)
		A_SA = (short) ((payload[index++] << 8) | (payload[index++] & 0xFF));

		// Extract A_TA (Target Address - 2 Bytes)
		A_TA = (short) ((payload[index++] << 8) | (payload[index++] & 0xFF));

		// Extract targetAddressType (Assumes A_TA_Type enum has a fromValue() method)
		targetAddressType = A_TA_Type.fromValue(payload[index++]);

		// Extract A_AE (if present, assume the first byte defines its length)
		if (messageType == A_MType.REMOTE_DIAGNOSTICS)
		{
			int aeLength = (payload.length - A_Length - 4 - 6) / 2;   // Number of short values in A_AE
			if (aeLength > 0) {
				A_AE = new short[aeLength];
				for (int i = 0; i < aeLength; i++) {
					A_AE[i] = (short) ((payload[index++] << 8) | (payload[index++] & 0xFF));
				}
			}
		}

		// Extract responseSID (Service ID - 1 Byte)
		byte code = payload[index++];
		if(code == 0x7f)
		{
			responseStatus = ResponseStatus.NEGATIVE_RESPONSE;
			responseSID = payload[index++];    //SID (e.g. 0x10)
		}
		else
		{
			responseStatus = ResponseStatus.POSTIVE_RESPONSE;
			responseSID = code;				   //SID + 0x40 (e.g. 0x50)
			// Extract Subfunction echo (echoSF - 1 Byte)
			echoSF = payload[index++];
		}

		
		responseStatus = ResponseStatus.POSTIVE_RESPONSE;
		// Extract A_Data (remaining bytes except last 4 for A_Length)
		int remainingBytes = payload.length - index - 4; // Excluding last 4 bytes for A_Length
		byte[] A_Data = null;
		if (remainingBytes > 0) {
			A_Data = new byte[remainingBytes];
			System.arraycopy(payload, index, A_Data, 0, remainingBytes);
			index += remainingBytes;
		}

	}

	/******************************* Debugging Method ****************************/
	@Override
	public String toString() {
		return "Response {" +
				"messageType=" + messageType +
				", A_SA=0x" + Integer.toHexString(A_SA & 0xFFFF) +
				", A_TA=0x" + Integer.toHexString(A_TA & 0xFFFF) +
				", targetAddressType=" + targetAddressType +
				", A_AE=" + Arrays.toString(A_AE) +
				", responseSID=0x" + Integer.toHexString(responseSID & 0xFF) +
				", echoSF=0x" + Integer.toHexString(echoSF & 0xFF) +
				", A_Data=" + Arrays.toString(A_Data) +
				", A_Length=" + A_Length +
				'}';
	}
}
